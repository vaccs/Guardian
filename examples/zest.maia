
%skip: ' ' | '\n';

number: /int: ['0'-'9']+/ #value;

%start: number string;

u = number[0].value;

t = (u, string[0].value);

q = (true, );

w = (3.14, );

s = t + (q + w);

fib = $int x -> int: x < 2 ? x : fib(x - 1) + fib(x - 2);

fib2 = $int x -> int: x < 2 ? k : fib2(x - 1) + fib2(x - 2);

k = 3;

bar =
	$int x, y, z -> int: (
		$int a -> int: (
			$int b -> int: (
				$int c -> int:
					a + b + c)(z))(y))(x);

iseven = $int x -> bool: x == 0 ? true  : isodd (x - 1);
isodd  = $int x -> bool: x == 0 ? false : iseven(x - 1);

%error: isodd(7) && iseven(4);
%error: isodd(a + 1) && iseven(a + 0);

a = 2;

boo1 = let! b = a + 2, c = b + 2: a + b + c;
boo2 = let! b = a + 2, c = b + 2: bar(a, b, c);
boo3 = let! b = u + 2, c = b + 2: bar(u, b, c);

%error: boo1 > 1;
%error: boo2 > 1;
%error: boo3 > 1;

list1 = [1, 2, 3, 4];
list2 = [<int>];

dict1 = {1: 2, 2: 3, 4: 5};
dict2 = {<int: float>};

f = $int a, b -> int -> int: {0: a, 1: b};

%error: f(3, 4) == {0:3} + {1:4};
%error: f(u, 4) == {0:u} + {1:4};

compose =
	$($int -> int) f -> $($int -> int) -> $int -> int:
	$($int -> int) g -> $int -> int:
	$int x -> int: f(g(x));

%error: compose($int x -> int: x + 3)($int y -> int: y + 2)(5) == 10;
%error: compose($int x -> int: x + 2)($int y -> int: y + 3)(u) == u + 5;
%error: compose($int x -> int: x + u)($int y -> int: y + 3)(2) == u + 5;

%error:
	let! factory = $int a, b -> $int -> int:
		let! basis = {0: a, 1: b},
		fib = $int x -> int: x < 2 ? basis[x] : fib(x - 1) + fib(x - 2):
		fib,
	fact1 = factory(1, 2),
	fact2 = factory(u + 2, u + 3):
	fact1(5) > 5 && fact2(5) > 5;

%error: len!(s) == 4;

string: /['a'-'z', 'A'-'Z']+/ #value;

%error: float!(s.0) + s.3 > 10.0;




















