[{
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%parse: argv as \"abc\";"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out"
	],
	"exit-code": 1
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"number: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as number number;",
			
			"f = $int x -> ($ -> ($int -> ($ -> int))):",
				"$ -> ($int -> ($ -> int)): ",
					"$int y -> ($ -> int): ",
						"$ -> int: x + y;",
			
			"x = number[0].value;",
			"y = number[1].value;",
			
			"%error: f(x)()(y)() == 7;"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out"
	],
	"exit-code": 1
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"number: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as number number;",
			
			"f = $int x -> ($ -> ($int -> ($ -> int))):",
				"$ -> ($int -> ($ -> int)): ",
					"$int y -> ($ -> int): ",
						"$ -> int: x + y;",
			
			"x = number[0];",
			"y = number[1];",
			
			"%error: f(x)()(y)() == 7;"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c"
	],
	"exit-code": 1
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"number: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as number number;",
			
			"f = $int x -> ($ -> ($int -> ($ -> int))):",
				"$ -> ($int -> ($ -> int)): ",
					"$int y -> ($ -> int): ",
						"$ -> int: x + y;",
			
			"x = number[0].value;",
			"y = number[1].value;",
			
			"%error: f(x)()(y)() == 7;"
		],
		
		"./test.txt": [
			"3 4"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out ./test.txt"
	]
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"number: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as number number;",
			
			"f = $int x -> ($ -> ($int -> ($ -> int))):",
				"$ -> ($int -> ($ -> int)): ",
					"$int y -> ($ -> int): ",
						"$ -> int: x + y;",
			
			"x = number[0].value;",
			"y = number[1].value;",
			
			"%error: f(x)()(y)() == 7;"
		],
		
		"./test.txt": [
			"2 3"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out ./test.txt"
	],
	"exit-code": 1
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"integer: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as integer;",
			
			"u = integer[0].value;",
			
			"iseven = $int x -> bool: x == 0 ? true  : isodd (x - 1);",
			"isodd  = $int x -> bool: x == 0 ? false : iseven(x - 1);",
			
			"%error: isodd(7) && iseven(8);",
			"%error: isodd(u) && iseven(u + 1);",
		],
		
		"./test.txt": [
			"7"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out ./test.txt"
	],
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"integer: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as integer;",
			
			"u = integer[0].value;",
			
			"a = 2;",
			
			"bar =",
			"	$int x, y, z -> int: (",
			"		$int a -> int: (",
			"			$int b -> int: (",
			"				$int c -> int:",
			"					a + b + c)(z))(y))(x);",
			
			"boo1 = let! b = a + 2, c = b + 2: a + b + c;",
			"boo2 = let! b = a + 2, c = b + 2: bar(a, b, c);",
			"boo3 = let! b = u + 2, c = b + 2: bar(u, b, c);",
			
			"%error: boo1 > 1;",
			"%error: boo2 > 1;",
			"%error: boo3 > 1;",
		],
		
		"./test.txt": [
			"7"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out ./test.txt"
	],
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"integer: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as integer;",
			
			"u = integer[0].value;",
			
			"compose =",
			"	$($int -> int) f -> $($int -> int) -> $int -> int:",
			"	$($int -> int) g -> $int -> int:",
			"	$int x -> int: f(g(x));",
			
			"%error: compose($int x -> int: x + 3)($int y -> int: y + 2)(5) == 10;",
			"%error: compose($int x -> int: x + 2)($int y -> int: y + 3)(u) == u + 5;",
			"%error: compose($int x -> int: x + u)($int y -> int: y + 3)(2) == u + 5;",
		],
		
		"./test.txt": [
			"7"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out ./test.txt"
	],
}, {
	"files": {
		"./maia": "bin/test-build/yes-verbose/no-dotout/maia",
		
		"./input.maia": [
			"%skip: ' ' | '\\n';",
			
			"integer: /int: ['0'-'9']+/ #value;",
			
			"%parse: argv as integer;",
			
			"u = integer[0].value;",
			
			"%error:",
			"	let! factory = $int a, b -> $int -> int:",
			"		let! basis = {0: a, 1: b},",
			"		fib = $int x -> int: x < 2 ? basis[x] : fib(x - 1) + fib(x - 2):",
			"		fib,",
			"	fact1 = factory(1, 2),",
			"	fact2 = factory(u + 2, u + 3):",
			"	fact1(5) > 5 && fact2(5) > 5;",
		],
		
		"./test.txt": [
			"7"
		]
	},
	"commands": [
		"./maia -i ./input.maia -o out.c",
		"gcc -Wall -Werror ./out.c -o ./out -lgmp",
		"./out ./test.txt"
	],
}]




















