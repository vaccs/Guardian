
%include "charset.zb"
%include "regex.zb"

tokentype
	: "int" #int_
	| "char" #char_
	| "bool" #bool_
	| "float" #float_
	;

grammar_highest
	: `char` #character                                (`'#' ['a'-'z','_']+ "[]"?` #tags[])*
	| `int` #integer                                   (`'#' ['a'-'z','_']+ "[]"?` #tags[])*
	| `string` #string                                 (`'#' ['a'-'z','_']+ "[]"?` #tags[])*
	| `identifier` #name                               (`'#' ['a'-'z','_']+ "[]"?` #tags[])*
	| '/' (tokentype #tokentype ':')? regex #regex '/' (`'#' ['a'-'z','_']+ "[]"?` #tags[])*
	| '[' charset #charset ']'                         (`'#' ['a'-'z','_']+ "[]"?` #tags[])*
	| '(' grammar #subgrammar ')'
	;

grammar_postfix
	: grammar_highest #base
	| grammar_highest #base '+' #plus
	| grammar_highest #base '*' #star
	| grammar_highest #base '?' #qmark
	| grammar_highest #base '{' `int` #n                 '}'
	| grammar_highest #base '{' `int` #n ',' #c          '}'
	| grammar_highest #base '{'          ',' #c `int` #m '}'
	| grammar_highest #base '{' `int` #n ',' #c `int` #m '}'
	;

grammar_juxtaposition: grammar_postfix #base (grammar_postfix #juxtapositions[])*;

grammar: grammar_juxtaposition #base ('|' grammar_juxtaposition #ors[])*;

grammar_rule: `identifier` #name ':' grammar #grammar ';';

