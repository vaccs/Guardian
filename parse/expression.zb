
// %extra_field: primary_expression, "unsigned", kind;
// %extra_field: primary_expression, "struct type*", type;
// %extra_field: primary_expression, "struct value*", value, free_value();

%include "type.zb"

primary_expression
	: "true" #true_literal
	| "false" #false_literal
	
	| `int` #integer_literal
	
	| `float` #float_literal
	
	| `string` #string_literal
	
	| `identifier` #identifier
	
	| "all!"          #all_form '(' expression #arg ')'
	| "any!"          #any_form '(' expression #arg ')'
	| "bool!"         #bool_form '(' expression #arg ')'
	| "crossmap!"     #crossmap_form '(' expression #args[]  (',' expression #args[])+ ')'
//	| "dictmap!"      #dictmap_form '(' expression #arg ')'
	| "filter!"       #filter_form '(' expression #args[] ',' expression #args[] ')'
	| "float!"        #float_form '(' expression #arg ')'
	| "int!"          #int_form '(' expression #arg ')'
	| "len!"          #len_form '(' expression #arg ')'
	| "map!"          #map_form '(' expression #args[] (',' expression #args[])+ ')'
//	| "max!"          #max_form '(' expression #args[] (',' expression #args[])? ')'
//	| "min!"          #min_form '(' expression #args[] (',' expression #args[])? ')'
	| "range!"        #range_form '(' expression #args[] (',' expression #args[])? ')'
	| "reduce!"       #reduce_form '('expression #args[] ',' expression #args[] ')'
	| "set!"          #set_form '(' expression #arg ')'
//	| "setmap!"       #dictmap_form '(' expression #arg ')'
//	| "sort!"         #sort_form '(' expression #arg ')'
	| "sum!"          #sum_form '(' expression #arg ')'
//	| "zip!"          #zip_form '(' expression #args[]  (',' expression #args[])* ')'

	| "isabspath!"      #isabspath_form '(' expression #arg ')'
	| "isdir!"          #isdir_form '(' expression #arg ')'
	| "isaccessibleto!" #isaccessibleto_form '(' expression #args[] ',' expression #args[] ')'
	| "isexecutableby!" #isexecutableby_form '(' expression #args[] ',' expression #args[] ')'
	
	// tuples:
	| '(' #paren                                                             ')'
	| '(' #paren expression #elements[]                                      ')'
	| '(' #paren expression #elements[]  ',' #comma                          ')'
	| '(' #paren expression #elements[] (',' #comma expression #elements[])+ ')'
	
	// lists:
	| '[' #list '<' type #emptytype '>' ']'
	| '[' #list expression #elements[]  (',' expression #elements[])* ']'
	
	// sets:
	| '{' #curly (expression #elements[]) (',' expression #elements[])* '}'
	| '{' #curly '<' type #emptyset '>' '}'
	
	// dicts:
	| %keyvalue: expression #key ':' expression #value:
		('{' #curly (keyvalue #keyvalues[]) (',' keyvalue #keyvalues[])* '}')
	| '{' #curly '<' type #emptykey ':' type #emptyvalue '>' '}'
	;

postfix_expression
	: primary_expression #base
	
	| postfix_expression #sub '[' expression #index ']'
	
	| postfix_expression #sub '[' expression #startindex ':' #slice ']'
	| postfix_expression #sub '['                        ':' #slice expression #endindex ']'
	| postfix_expression #sub '[' expression #startindex ':' #slice expression #endindex ']'
	
	| postfix_expression #sub '.' `int` #tupleindex
	
	| postfix_expression #sub '.' `identifier` #field
	
	| postfix_expression #sub '(' #call (expression #args[] (',' expression #args[])*)? ')'
	;

unary_expression
	: postfix_expression #base
	| "+" #plus   unary_expression #sub
	| "-" #minus  unary_expression #sub
	| "!" #lognot unary_expression #sub
	| "~" #bitnot unary_expression #sub
	;
	
exponentiation_expression
	: unary_expression #base
	| exponentiation_expression #left "**" unary_expression #right
	;

multiplicative_expression
	: exponentiation_expression #base
	| multiplicative_expression #left '%' #rdiv exponentiation_expression #right
	| multiplicative_expression #left '/' #qdiv exponentiation_expression #right
	| multiplicative_expression #left '*' #mult exponentiation_expression #right
	;

additive_expression
	: multiplicative_expression #base
	| additive_expression #left '+' #add multiplicative_expression #right
	| additive_expression #left '-' #sub multiplicative_expression #right
	;

shift_expression
	: additive_expression #base
	| shift_expression #left "<<" #lshift additive_expression #right
	| shift_expression #left ">>" #rshift additive_expression #right
	;

relational_expression
	: shift_expression #base
	| relational_expression #left '<'  #lt  shift_expression #right
	| relational_expression #left '>'  #gt  shift_expression #right
	| relational_expression #left "<=" #lte shift_expression #right
	| relational_expression #left ">=" #gte shift_expression #right
	;

equality_expression
	: relational_expression #base
	| equality_expression #left "==" #e relational_expression #right
	| equality_expression #left "!=" #n relational_expression #right
	;

match_expression
	: equality_expression #base
	| equality_expression #base "=~" '/' regex #pattern '/'
	;

and_expression
	: match_expression #base
	| and_expression #left '&' match_expression #right
	;

exclusive_or_expression
	: and_expression #base
	| exclusive_or_expression #left '^' and_expression #right
	;

inclusive_or_expression
	: exclusive_or_expression #base
	| inclusive_or_expression #left '|' exclusive_or_expression #right
	;

logical_and_expression
	: inclusive_or_expression #base
	| logical_and_expression #left "&&" inclusive_or_expression #right
	;

logical_or_expression
	: logical_and_expression #base
	| logical_or_expression #left "||" logical_and_expression #right
	;

inclusion_expression: logical_or_expression #base ("in" logical_or_expression #container)?;

possession_expression: inclusion_expression #base ("has" `identifier` #has)?;

implication_expression
	: possession_expression #base
	| possession_expression #base "implies" implication_expression #implies
	;

conditional_expression
	: implication_expression #base
	| implication_expression #base
		'?' #qmark expression #true_case
		':' conditional_expression #false_case
	;

%include "type.zb"

// %extra_field: lambda_expression, "struct unresolved*", lambda_captures, free_unresolved();

lambda_expression
	: conditional_expression #base
	| %parameter: (primitive_type #type)? `identifier` #name:
		('$' (primitive_type #type `identifier` #name (',' parameter #parameters[])*)?
			"->" type #rettype ':' let_expression #lambda)
	;

let_expression
	: lambda_expression #base
	| %parameter: `identifier` #name '=' expression #expression:
		("let!" #let (parameter #parameters[]) (',' parameter #parameters[])* ':' let_expression #body)
	;

expression: let_expression #base;










































