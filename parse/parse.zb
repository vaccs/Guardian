
%skip
	: ' ' | '\t' | '\n'
	| "//" [!'\n']* '\n'
	;

`char`: '\'' ([!('\'', '\\')] | '\\' .) '\'';

`int`: '0' | ('0' ('x' | 'b')?)? ['1'-'9'] ['0'-'9']*;

`float`: ['0'-'9']+ '.' ['0'-'9']+;

`string`: '\"' ([!('\"', '\\')] | '\\' .)* '\"';

`identifier`: ['_', 'a'-'z', 'A'-'Z'] ['_', 'a'-'z', 'A'-'Z', '0'-'9']*;

%include "charset.zb"

%include "regex.zb"

%include "expression.zb"

%include "grammar.zb"

include_directive: "%" "include" ":" `string` #path ';';

skip_directive: "%" "skip" ":" regex #regex ';';

assert_statement
	: "%"    "note" #note    ':' expression #expression ';'
	| "%" "warning" #warning ':' expression #expression ';'
	| "%"   "error" #error   ':' expression #expression ';'
	;

print_statement: ("%" "print" #print ':')? expression #expression ';';

parse_statement: "%" "parse" #parse ':' (expression #expression | "argv" #argv) "as" grammar #grammar ';';

declare_statement: `identifier` #name '=' expression #expression ';';

grammar_rule: `identifier` #name ':' grammar #grammar ';';

statement
	: include_directive #include
	| skip_directive    #skip
	| assert_statement  #assert
	| print_statement   #print
	| parse_statement   #parse
	| declare_statement #declare
	| grammar_rule      #grammar
	;

%start: (statement #statements[])+;














