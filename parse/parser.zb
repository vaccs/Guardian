
%skip: ' ' | '\t' | '\n' | "//" [!'\n']* '\n';

`char`: '\'' ([!('\'', '\\')] | '\\' .) '\'';

`string`: '\"' ([!('\"', '\\')] | '\\' .)* '\"';

`int`: '0' | ('0' 'x'?)? ['1'-'9'] ['0'-'9']*;

`float`: ['0'-'9']+ '.' ['0'-'9']+;

`identifier`: ['a'-'z'] ['_', 'a'-'z', '0'-'9']*;

charset_highest: `char` | `int` | '(' charset ')';

charset_prefix: '!'? charset_highest;

charset_range: charset_prefix ('-' charset_prefix)?;

charset_intersect: charset_range ('&' charset_range)*;

charset_symdif: charset_intersect ('^' charset_intersect)*;

charset: charset_symdif ((',' | '|')? charset_symdif)*;

regex_highest
	: `char`
	| `int`
	| `string`
	| '(' regex ')'
	| '[' charset ']'
	;

regex_postfix: regex_highest ('+' | '?' | '*')?;

regex_jux: regex_postfix+;

regex: regex_jux ('|' regex_jux)*;

grammar_highest
	: `char` `'#' ['a'-'z','_']+ "[]"?`?
	| `int` `'#' ['a'-'z','_']+ "[]"?`?
	| `string` `'#' ['a'-'z','_']+ "[]"?`?
	| `identifier` `'#' ['a'-'z','_']+ "[]"?`?
	| '/' regex '/' `'#' ['a'-'z','_']+ "[]"?`?
	| '[' charset ']' `'#' ['a'-'z','_']+ "[]"?`?
	| '(' grammar ')'
	;

grammar_postfix: grammar_highest ('+' | '?' | '*')?;

grammar_jux: grammar_postfix+;

grammar: grammar_jux ('|' grammar_jux)*;

primary_expression
	: `int`
	| `float`
	| `char`
	| `string`
	| `identifier`
	| '(' (expression (',' expression)*)? ')'
	| '[' (expression (',' expression)*)? ']'
	;

postfix_expression
	: primary_expression
	| postfix_expression '[' expression ']'
	| postfix_expression '.' `identifier`
	| postfix_expression '(' (expression (',' expression)*)? ')'
	;

unary_expression
	: postfix_expression
	| "+" unary_expression
	| "-" unary_expression
	| "!" unary_expression
	| "~" unary_expression
	;
	
exponentiation_expression
	: unary_expression
	| exponentiation_expression "**" unary_expression
	;

multiplicative_expression
	: exponentiation_expression
	| multiplicative_expression '*' exponentiation_expression
	| multiplicative_expression '/' exponentiation_expression
	| multiplicative_expression '%' exponentiation_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression
	;

shift_expression
	: additive_expression
	| shift_expression "<<" additive_expression
	| shift_expression ">>" additive_expression
	;

relational_expression
	: shift_expression
	| relational_expression '<' shift_expression
	| relational_expression '>' shift_expression
	| relational_expression "<=" shift_expression
	| relational_expression ">=" shift_expression
	;

equality_expression
	: relational_expression
	| equality_expression "==" relational_expression
	| equality_expression "!=" relational_expression
	;

and_expression
	: equality_expression
	| and_expression '&' equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression '^' and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression "&&" inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression "||" logical_and_expression
	;

conditional_expression
	: logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression
	;

primary_type
	: "int"
	| "bool"
	| "float"
	| "char"
	| `identifier`
	| primary_type "[]"
	| '(' (type (',' type)*)? ')'
	;

type: primary_type
	| '$' (type (',' type)*)? ':' type
	;

lambda_expression
	: conditional_expression
	| '$' (type `identifier` (',' type? `identifier`)*)? ':' lambda_expression
	;

possession_expression: lambda_expression ("has" `identifier`)?;

implication_expression: possession_expression ("implies" possession_expression)*;

expression: implication_expression ("iff" implication_expression)*;

entry
	: "%" "using" #using `string` #path ';'
	| "%" "skip" #skip ":" regex #regex ';'
	| "%" "start" #start ":" grammar ';'
	| `identifier` ':' grammar #grammar ';'
	| `identifier` '=' expression #expression ';'
	|  ("%" "debug" #debug ":")? expression #assertion ';'
	|  ("%" "note" #note ":")? expression #assertion ';'
	|  ("%" "warning" #warning ":")? expression #assertion ';'
	|  ("%" "error" #error ":")? expression #assertion ';'
	;

root: (entry #entries[]) +;

%start: root #root;














