
%skip: ' ' | '\t' | '\n' | "//" [!'\n']* '\n';

`char`: '\'' ([!('\'', '\\')] | '\\' .) '\'';

`string`: '\"' ([!('\"', '\\')] | '\\' .)* '\"';

`int`: ['1'-'9'] ['0'-'9']*;

`identifier`: ['a'-'z']+;

charset_highest: `char` | `int` | '(' charset ')';

charset_prefix: '!'? charset_highest;

charset_range: charset_prefix ('-' charset_prefix)?;

charset_intersect: charset_range ('&' charset_range)*;

charset_symdif: charset_intersect ('^' charset_intersect)*;

charset: charset_symdif ((',' | '|')? charset_symdif)*;

regex_highest
	: `char`
	| `int`
	| `string`
	| '(' regex ')'
	| '[' charset ']'
	;

regex_postfix: regex_highest ('+' | '?' | '*')?;

regex_jux: regex_postfix+;

regex: regex_jux ('|' regex_jux)*;

grammar_highest
	: `char` `'#' ['a'-'z','_']+`?
	| `int` `'#' ['a'-'z','_']+`?
	| `string` `'#' ['a'-'z','_']+`?
	| '/' regex '/' `'#' ['a'-'z','_']+`?
	| '(' grammar ')'
	;

grammar_postfix: grammar_highest ('+' | '?' | '*')?;

grammar_jux: grammar_postfix+;

grammar: grammar_jux ('|' grammar_jux)*;

expression: "expression";

assertion: "assertion";

root: (
	  "%" "skip"   ":" regex ';'
	| "%" "start"  ":" grammar ';'
	| `identifier` ':' grammar ';'
	| `identifier` '=' expression ';'
	|  assertion
)+;

%start: root;



